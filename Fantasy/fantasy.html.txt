<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marca Fantasy</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            box-sizing: border-box;
        }
        .player-card {
            transition: all 0.3s ease;
        }
        .player-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        .formation-field {
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #22c55e 100%);
            border-radius: 8px;
            position: relative;
            border: 3px solid #ffffff;
            overflow: hidden;
            box-shadow: inset 0 0 20px rgba(0,0,0,0.1);
        }
        
        .field-lines {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        
        .grass-pattern {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: repeating-linear-gradient(
                90deg,
                #22c55e 0px,
                #16a34a 20px,
                #22c55e 40px
            );
            opacity: 0.3;
        }
        
        .player-position {
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 10;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 70px;
        }
        .player-position:hover {
            transform: scale(1.1);
        }
        .player-avatar {
            width: 55px;
            height: 55px;
            border-radius: 50%;
            border: 4px solid white;
            box-shadow: 0 4px 15px rgba(0,0,0,0.5);
            object-fit: cover;
            background: linear-gradient(135deg, #0077FF, #0055CC);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
            margin-bottom: 4px;
            position: relative;
        }
        .player-position.occupied .player-avatar {
            border-color: #FFD700;
            box-shadow: 0 4px 20px rgba(255, 215, 0, 0.4);
        }
        .player-position:hover .player-avatar {
            box-shadow: 0 6px 25px rgba(0,0,0,0.6);
            border-width: 5px;
        }
        .player-name {
            background: linear-gradient(135deg, #1a1a1a, #333);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 9px;
            font-weight: bold;
            text-align: center;
            min-width: 55px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 70px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.2);
        }
        .player-position.occupied .player-name {
            background: linear-gradient(135deg, #FFD700, #FFA500);
            color: #1a1a1a;
            font-weight: 900;
        }
        .stadium-part {
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .stadium-part:hover {
            filter: brightness(1.2);
            stroke-width: 3;
        }
        .upgrade-card {
            transition: all 0.3s ease;
        }
        .upgrade-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
    </style>
</head>
<body class="bg-black min-h-screen">
    <div class="container mx-auto px-4 py-6">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-xl mb-6 p-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800">⚽ Marca Fantasy</h1>
                    <p class="text-gray-600">Crea tu equipo ideal y compite</p>
                </div>
                <div class="text-right">
                    <div class="text-2xl font-bold text-green-600" id="budget">€100M</div>
                    <div class="text-sm text-gray-600">Presupuesto restante</div>
                </div>
            </div>
        </div>

        <!-- Navigation -->
        <div class="bg-white rounded-lg shadow-xl mb-6">
            <div class="flex border-b">
                <button class="tab-btn px-6 py-3 font-semibold text-blue-600 border-b-2 border-blue-600" data-tab="team">Mi Equipo</button>
                <button class="tab-btn px-6 py-3 font-semibold text-gray-600 hover:text-blue-600" data-tab="market">Mercado</button>
                <button class="tab-btn px-6 py-3 font-semibold text-gray-600 hover:text-blue-600" data-tab="stadium">Estadio</button>
                <button class="tab-btn px-6 py-3 font-semibold text-gray-600 hover:text-blue-600" data-tab="league">Liga</button>
            </div>
        </div>

        <!-- Team Tab -->
        <div id="team-tab" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Formation -->
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Formación</h2>
                        <select id="formation-selector" class="px-3 py-2 border rounded-lg font-semibold">
                            <option value="4-3-3">4-3-3 (Equilibrada)</option>
                            <option value="5-4-1">5-4-1 (Defensiva)</option>
                            <option value="5-3-2">5-3-2 (Defensiva)</option>
                            <option value="5-2-3">5-2-3 (Defensiva)</option>
                            <option value="4-5-1">4-5-1 (Mediocampo)</option>
                            <option value="4-4-2">4-4-2 (Clásica)</option>
                            <option value="4-2-4">4-2-4 (Ofensiva)</option>
                            <option value="3-6-1">3-6-1 (Mediocampo)</option>
                            <option value="3-5-2">3-5-2 (Equilibrada)</option>
                            <option value="3-4-3">3-4-3 (Ofensiva)</option>
                            <option value="3-3-4">3-3-4 (Ultra Ofensiva)</option>
                        </select>
                    </div>
                    <div class="formation-field relative h-96 rounded-lg p-2" id="formation-field" style="width: 100%; max-width: 600px; margin: 0 auto;">
                        <!-- Grass pattern -->
                        <div class="grass-pattern"></div>
                        
                        <!-- Field lines -->
                        <svg class="field-lines" viewBox="0 0 600 400">
                            <!-- Outer boundary -->
                            <rect x="15" y="15" width="570" height="370" fill="none" stroke="white" stroke-width="3"/>
                            
                            <!-- Center line -->
                            <line x1="15" y1="200" x2="585" y2="200" stroke="white" stroke-width="2"/>
                            
                            <!-- Center circle -->
                            <circle cx="300" cy="200" r="50" fill="none" stroke="white" stroke-width="2"/>
                            <circle cx="300" cy="200" r="2" fill="white"/>
                            
                            <!-- Left penalty area -->
                            <rect x="15" y="130" width="80" height="140" fill="none" stroke="white" stroke-width="2"/>
                            <rect x="15" y="165" width="25" height="70" fill="none" stroke="white" stroke-width="2"/>
                            
                            <!-- Right penalty area -->
                            <rect x="505" y="130" width="80" height="140" fill="none" stroke="white" stroke-width="2"/>
                            <rect x="560" y="165" width="25" height="70" fill="none" stroke="white" stroke-width="2"/>
                            
                            <!-- Left goal -->
                            <rect x="8" y="175" width="7" height="50" fill="none" stroke="white" stroke-width="2"/>
                            
                            <!-- Right goal -->
                            <rect x="585" y="175" width="7" height="50" fill="none" stroke="white" stroke-width="2"/>
                            
                            <!-- Penalty spots -->
                            <circle cx="60" cy="200" r="2" fill="white"/>
                            <circle cx="540" cy="200" r="2" fill="white"/>
                            
                            <!-- Corner arcs -->
                            <path d="M 15 15 Q 25 15 25 25" fill="none" stroke="white" stroke-width="2"/>
                            <path d="M 585 15 Q 575 15 575 25" fill="none" stroke="white" stroke-width="2"/>
                            <path d="M 15 385 Q 25 385 25 375" fill="none" stroke="white" stroke-width="2"/>
                            <path d="M 585 385 Q 575 385 575 375" fill="none" stroke="white" stroke-width="2"/>
                        </svg>
                        
                        <!-- Formation positions will be generated dynamically -->
                    </div>
                </div>

                <!-- Team Stats -->
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h2 class="text-xl font-bold mb-4">Estadísticas del Equipo</h2>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                            <span class="font-semibold">Jugadores seleccionados:</span>
                            <span id="selected-count" class="text-blue-600 font-bold">0/11</span>
                        </div>
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                            <span class="font-semibold">Puntos totales:</span>
                            <span id="total-points" class="text-green-600 font-bold">0</span>
                        </div>
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                            <span class="font-semibold">Valor del equipo:</span>
                            <span id="team-value" class="text-purple-600 font-bold">€0M</span>
                        </div>
                    </div>

                    <div class="mt-6">
                        <h3 class="font-bold mb-3">Jugadores Titulares:</h3>
                        <div id="selected-players" class="space-y-2 max-h-32 overflow-y-auto">
                            <p class="text-gray-500 text-center py-4">No hay jugadores seleccionados</p>
                        </div>
                    </div>

                    <div class="mt-4">
                        <h3 class="font-bold mb-3">Banquillo:</h3>
                        <div id="bench-players" class="space-y-2 max-h-32 overflow-y-auto">
                            <p class="text-gray-500 text-center py-4">No hay jugadores en el banquillo</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Market Tab -->
        <div id="market-tab" class="tab-content hidden">
            <div class="bg-white rounded-lg shadow-xl p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-bold">Mercado de Fichajes</h2>
                    <div class="flex gap-2">
                        <select id="position-filter" class="px-3 py-2 border rounded-lg">
                            <option value="">Todas las posiciones</option>
                            <option value="GK">Porteros</option>
                            <option value="DEF">Defensas</option>
                            <option value="MID">Centrocampistas</option>
                            <option value="FWD">Delanteros</option>
                        </select>
                        <select id="team-filter" class="px-3 py-2 border rounded-lg">
                            <option value="">Todos los equipos</option>
                            <option value="Real Madrid">Real Madrid</option>
                            <option value="Barcelona">Barcelona</option>
                            <option value="Atlético Madrid">Atlético Madrid</option>
                            <option value="Sevilla">Sevilla</option>
                        </select>
                    </div>
                </div>

                <div id="players-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    <!-- Players will be populated by JavaScript -->
                </div>
            </div>
        </div>

        <!-- Stadium Tab -->
        <div id="stadium-tab" class="tab-content hidden">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Stadium View -->
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h2 class="text-xl font-bold mb-4">🏟️ Tu Estadio</h2>
                    <div class="relative bg-gradient-to-b from-blue-400 to-green-500 rounded-lg p-4 h-96 overflow-hidden">
                        <!-- Sky and Background -->
                        <div class="absolute inset-0 bg-gradient-to-b from-blue-300 via-blue-400 to-green-500 rounded-lg"></div>
                        
                        <!-- Stadium Structure -->
                        <svg class="absolute inset-0 w-full h-full" viewBox="0 0 400 300">
                            <!-- Upper Stands -->
                            <ellipse cx="200" cy="280" rx="180" ry="60" fill="#666" stroke="#444" stroke-width="2" class="stadium-part" data-part="upper-stands"/>
                            <ellipse cx="200" cy="275" rx="170" ry="55" fill="#777" class="stadium-part" data-part="upper-stands"/>
                            
                            <!-- Lower Stands -->
                            <ellipse cx="200" cy="290" rx="160" ry="45" fill="#888" stroke="#666" stroke-width="2" class="stadium-part" data-part="lower-stands"/>
                            <ellipse cx="200" cy="285" rx="150" ry="40" fill="#999" class="stadium-part" data-part="lower-stands"/>
                            
                            <!-- VIP Boxes -->
                            <rect x="120" y="220" width="160" height="20" fill="#b8860b" stroke="#8b7355" stroke-width="1" class="stadium-part" data-part="vip-boxes"/>
                            <rect x="125" y="222" width="150" height="16" fill="#daa520"/>
                            
                            <!-- Roof -->
                            <ellipse cx="200" cy="200" rx="190" ry="30" fill="#333" stroke="#222" stroke-width="2" class="stadium-part" data-part="roof"/>
                            <ellipse cx="200" cy="195" rx="185" ry="25" fill="#444"/>
                            
                            <!-- Floodlights -->
                            <circle cx="80" cy="180" r="8" fill="#ffff99" stroke="#333" stroke-width="2" class="stadium-part" data-part="floodlights"/>
                            <circle cx="320" cy="180" r="8" fill="#ffff99" stroke="#333" stroke-width="2" class="stadium-part" data-part="floodlights"/>
                            <circle cx="150" cy="160" r="8" fill="#ffff99" stroke="#333" stroke-width="2" class="stadium-part" data-part="floodlights"/>
                            <circle cx="250" cy="160" r="8" fill="#ffff99" stroke="#333" stroke-width="2" class="stadium-part" data-part="floodlights"/>
                            
                            <!-- Scoreboard -->
                            <rect x="160" y="140" width="80" height="40" fill="#000" stroke="#333" stroke-width="2" class="stadium-part" data-part="scoreboard"/>
                            <rect x="165" y="145" width="70" height="30" fill="#001100"/>
                            <text x="200" y="165" text-anchor="middle" fill="#00ff00" font-size="12" font-family="monospace">0 - 0</text>
                            
                            <!-- Field -->
                            <ellipse cx="200" cy="260" rx="120" ry="35" fill="#228b22" stroke="#fff" stroke-width="2"/>
                            <ellipse cx="200" cy="260" rx="115" ry="30" fill="#32cd32"/>
                        </svg>
                        
                        <!-- Upgrade Buttons -->
                        <div class="absolute top-4 right-4 space-y-2">
                            <div class="bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
                                Capacidad: <span id="stadium-capacity">25,000</span>
                            </div>
                            <div class="bg-black bg-opacity-50 text-white px-2 py-1 rounded text-xs">
                                Ingresos: €<span id="stadium-income">50K</span>/partido
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Stadium Upgrades -->
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h2 class="text-xl font-bold mb-4">Mejoras del Estadio</h2>
                    <div class="space-y-4" id="stadium-upgrades">
                        <!-- Upgrades will be populated by JavaScript -->
                    </div>
                    
                    <div class="mt-6 p-4 bg-blue-50 rounded-lg">
                        <h3 class="font-bold text-blue-800 mb-2">💰 Finanzas del Estadio</h3>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div>
                                <span class="text-gray-600">Inversión total:</span>
                                <div class="font-bold text-red-600" id="total-investment">€0M</div>
                            </div>
                            <div>
                                <span class="text-gray-600">Ingresos por partido:</span>
                                <div class="font-bold text-green-600" id="match-income">€50K</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- League Tab -->
        <div id="league-tab" class="tab-content hidden">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- League Table -->
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h2 class="text-xl font-bold mb-4">Clasificación Liga Fantasy</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead>
                                <tr class="border-b">
                                    <th class="text-left py-2">Pos</th>
                                    <th class="text-left py-2">Manager</th>
                                    <th class="text-right py-2">Puntos</th>
                                </tr>
                            </thead>
                            <tbody id="league-table">
                                <!-- League table will be populated -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Next Fixtures -->
                <div class="bg-white rounded-lg shadow-xl p-6">
                    <h2 class="text-xl font-bold mb-4">Próximas Jornadas</h2>
                    <div id="fixtures" class="space-y-3">
                        <!-- Fixtures will be populated -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Player Selection Modal -->
    <div id="player-selection-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
            <div class="p-6 border-b">
                <div class="flex justify-between items-center">
                    <h2 class="text-xl font-bold" id="modal-title">Seleccionar Jugador</h2>
                    <button onclick="closePlayerModal()" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
                </div>
                <p class="text-gray-600 mt-1" id="modal-subtitle">Elige un jugador para esta posición</p>
            </div>
            <div class="p-6 overflow-y-auto max-h-[60vh]">
                <div id="modal-players-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Players will be populated here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Game State
        let gameState = {
            budget: 100,
            selectedPlayers: new Array(11).fill(null), // Starting XI
            benchPlayers: [], // All signed players (including starters)
            totalPoints: 0,
            teamValue: 0,
            currentFormation: '4-3-3',
            currentModalPosition: null,
            currentModalIndex: null,
            stadium: {
                capacity: 25000,
                totalInvestment: 0,
                matchIncome: 50000,
                upgrades: {
                    'lower-stands': 0,
                    'upper-stands': 0,
                    'vip-boxes': 0,
                    'roof': 0,
                    'floodlights': 0,
                    'scoreboard': 0
                }
            }
        };

        // Formation Configurations
        const formations = {
            '4-3-3': { defenders: 4, midfielders: 3, forwards: 3 },
            '5-4-1': { defenders: 5, midfielders: 4, forwards: 1 },
            '5-3-2': { defenders: 5, midfielders: 3, forwards: 2 },
            '5-2-3': { defenders: 5, midfielders: 2, forwards: 3 },
            '4-5-1': { defenders: 4, midfielders: 5, forwards: 1 },
            '4-4-2': { defenders: 4, midfielders: 4, forwards: 2 },
            '4-2-4': { defenders: 4, midfielders: 2, forwards: 4 },
            '3-6-1': { defenders: 3, midfielders: 6, forwards: 1 },
            '3-5-2': { defenders: 3, midfielders: 5, forwards: 2 },
            '3-4-3': { defenders: 3, midfielders: 4, forwards: 3 },
            '3-3-4': { defenders: 3, midfielders: 3, forwards: 4 }
        };

        // Generate formation positions
        function generateFormationPositions(formation) {
            const positions = [];
            
            // Goalkeeper
            positions.push({ left: 30, top: 165 });
            
            const defenseX = 140;
            const midfieldX = 300;
            const attackX = 460;
            
            // Defenders
            if (formation.defenders === 3) {
                const defPositions = [80, 165, 260];
                for (let i = 0; i < formation.defenders; i++) {
                    positions.push({ left: defenseX, top: defPositions[i] });
                }
            } else if (formation.defenders === 4) {
                const defPositions = [30, 120, 210, 300];
                for (let i = 0; i < formation.defenders; i++) {
                    positions.push({ left: defenseX, top: defPositions[i] });
                }
            } else if (formation.defenders === 5) {
                const defPositions = [20, 95, 165, 235, 305];
                for (let i = 0; i < formation.defenders; i++) {
                    positions.push({ left: defenseX, top: defPositions[i] });
                }
            }
            
            // Midfielders
            if (formation.midfielders === 6) {
                const midLine1X = 250;
                const midLine2X = 350;
                const midPositions = [70, 165, 260];
                
                for (let i = 0; i < 3; i++) {
                    positions.push({ left: midLine1X, top: midPositions[i] });
                }
                for (let i = 0; i < 3; i++) {
                    positions.push({ left: midLine2X, top: midPositions[i] });
                }
            } else if (formation.midfielders === 5) {
                const midPositions = [20, 90, 165, 240, 305];
                for (let i = 0; i < formation.midfielders; i++) {
                    positions.push({ left: midfieldX, top: midPositions[i] });
                }
            } else if (formation.midfielders === 4) {
                const midPositions = [30, 120, 210, 300];
                for (let i = 0; i < formation.midfielders; i++) {
                    positions.push({ left: midfieldX, top: midPositions[i] });
                }
            } else if (formation.midfielders === 3) {
                const midPositions = [70, 165, 260];
                for (let i = 0; i < formation.midfielders; i++) {
                    positions.push({ left: midfieldX, top: midPositions[i] });
                }
            } else {
                const midPositions = [70, 260];
                for (let i = 0; i < formation.midfielders; i++) {
                    positions.push({ left: midfieldX, top: midPositions[i] });
                }
            }
            
            // Forwards
            if (formation.forwards === 1) {
                positions.push({ left: attackX, top: 165 });
            } else if (formation.forwards === 2) {
                const fwdPositions = [70, 260];
                for (let i = 0; i < formation.forwards; i++) {
                    positions.push({ left: attackX, top: fwdPositions[i] });
                }
            } else if (formation.forwards === 3) {
                const fwdPositions = [70, 165, 260];
                for (let i = 0; i < formation.forwards; i++) {
                    positions.push({ left: attackX, top: fwdPositions[i] });
                }
            } else if (formation.forwards === 4) {
                const fwdPositions = [30, 120, 210, 300];
                for (let i = 0; i < formation.forwards; i++) {
                    positions.push({ left: attackX, top: fwdPositions[i] });
                }
            }
            
            return positions;
        }

        // Sample Players Data
        const players = [
            // Porteros
            { id: 1, name: "Thibaut Courtois", team: "Real Madrid", position: "GK", price: 6, points: 44, form: "📉" },
            { id: 2, name: "Marc-André ter Stegen", team: "Barcelona", position: "GK", price: 5.5, points: 52, form: "📈" },
            { id: 3, name: "Jan Oblak", team: "Atlético Madrid", position: "GK", price: 6.5, points: 67, form: "📈" },
            { id: 21, name: "Unai Simón", team: "Athletic Bilbao", position: "GK", price: 5, points: 58, form: "📈" },
            { id: 22, name: "Bono", team: "Sevilla", position: "GK", price: 4.5, points: 41, form: "📉" },
            
            // Defensas
            { id: 4, name: "Dani Carvajal", team: "Real Madrid", position: "DEF", price: 5.5, points: 48, form: "📈" },
            { id: 5, name: "Jordi Alba", team: "Barcelona", position: "DEF", price: 5, points: 35, form: "📉" },
            { id: 6, name: "José Giménez", team: "Atlético Madrid", position: "DEF", price: 4.5, points: 42, form: "📈" },
            { id: 7, name: "Sergio Ramos", team: "Sevilla", position: "DEF", price: 4, points: 28, form: "📉" },
            { id: 8, name: "David Alaba", team: "Real Madrid", position: "DEF", price: 5, points: 51, form: "📈" },
            { id: 9, name: "Ronald Araújo", team: "Barcelona", position: "DEF", price: 4.5, points: 46, form: "📈" },
            { id: 23, name: "Íñigo Martínez", team: "Athletic Bilbao", position: "DEF", price: 4, points: 39, form: "📈" },
            { id: 24, name: "Jules Koundé", team: "Barcelona", position: "DEF", price: 5.5, points: 54, form: "📈" },
            
            // Centrocampistas
            { id: 10, name: "Luka Modrić", team: "Real Madrid", position: "MID", price: 8, points: 63, form: "📈" },
            { id: 11, name: "Pedri", team: "Barcelona", position: "MID", price: 7.5, points: 57, form: "📈" },
            { id: 12, name: "Koke", team: "Atlético Madrid", position: "MID", price: 6, points: 49, form: "📈" },
            { id: 13, name: "Casemiro", team: "Real Madrid", position: "MID", price: 6.5, points: 45, form: "📉" },
            { id: 14, name: "Frenkie de Jong", team: "Barcelona", position: "MID", price: 7, points: 41, form: "📉" },
            { id: 25, name: "Gavi", team: "Barcelona", position: "MID", price: 6.5, points: 44, form: "📈" },
            { id: 26, name: "Toni Kroos", team: "Real Madrid", position: "MID", price: 7, points: 58, form: "📈" },
            { id: 27, name: "Marcos Llorente", team: "Atlético Madrid", position: "MID", price: 6.5, points: 52, form: "📈" },
            
            // Delanteros
            { id: 15, name: "Karim Benzema", team: "Real Madrid", position: "FWD", price: 12, points: 89, form: "📈" },
            { id: 16, name: "Robert Lewandowski", team: "Barcelona", position: "FWD", price: 11.5, points: 78, form: "📈" },
            { id: 17, name: "Antoine Griezmann", team: "Atlético Madrid", position: "FWD", price: 9, points: 67, form: "📈" },
            { id: 18, name: "Vinícius Jr.", team: "Real Madrid", position: "FWD", price: 10, points: 72, form: "📈" },
            { id: 19, name: "Ousmane Dembélé", team: "Barcelona", position: "FWD", price: 8.5, points: 54, form: "📉" },
            { id: 20, name: "Álvaro Morata", team: "Atlético Madrid", position: "FWD", price: 7.5, points: 48, form: "📈" },
            { id: 28, name: "Iago Aspas", team: "Celta Vigo", position: "FWD", price: 8, points: 71, form: "📈" },
            { id: 29, name: "Borja Iglesias", team: "Real Betis", position: "FWD", price: 7, points: 59, form: "📈" },
            { id: 30, name: "Mikel Oyarzabal", team: "Real Sociedad", position: "FWD", price: 8.5, points: 43, form: "📉" }
        ];

        // League Data
        const leagueTable = [
            { manager: "Tú", points: 0 },
            { manager: "Carlos_Fantasy", points: 1247 },
            { manager: "LaLiga_Master", points: 1198 },
            { manager: "ElClásico", points: 1156 },
            { manager: "Madridista_Pro", points: 1134 },
            { manager: "Culé_Forever", points: 1089 },
            { manager: "Atleti_Fan", points: 1067 },
            { manager: "Fantasy_King", points: 1045 }
        ];

        const fixtures = [
            { home: "Real Madrid", away: "Barcelona", date: "Sábado 14:00" },
            { home: "Atlético Madrid", away: "Sevilla", date: "Domingo 16:15" },
            { home: "Valencia", away: "Athletic", date: "Domingo 18:30" },
            { home: "Real Sociedad", away: "Betis", date: "Lunes 21:00" }
        ];

        // Stadium Upgrades Data
        const stadiumUpgrades = {
            'lower-stands': {
                name: '🏟️ Gradas Inferiores',
                description: 'Amplía la capacidad de las gradas inferiores',
                levels: [
                    { cost: 5, capacity: 5000, income: 15000, description: 'Gradas básicas' },
                    { cost: 10, capacity: 8000, income: 25000, description: 'Gradas mejoradas' },
                    { cost: 20, capacity: 12000, income: 40000, description: 'Gradas premium' }
                ]
            },
            'upper-stands': {
                name: '🏟️ Gradas Superiores',
                description: 'Construye gradas superiores para más aficionados',
                levels: [
                    { cost: 8, capacity: 8000, income: 20000, description: 'Segundo piso básico' },
                    { cost: 15, capacity: 12000, income: 35000, description: 'Segundo piso ampliado' },
                    { cost: 25, capacity: 18000, income: 55000, description: 'Gradas superiores completas' }
                ]
            },
            'vip-boxes': {
                name: '👑 Palcos VIP',
                description: 'Palcos exclusivos para clientes premium',
                levels: [
                    { cost: 12, capacity: 500, income: 30000, description: 'Palcos básicos' },
                    { cost: 20, capacity: 800, income: 50000, description: 'Palcos de lujo' },
                    { cost: 35, capacity: 1200, income: 80000, description: 'Palcos presidenciales' }
                ]
            },
            'roof': {
                name: '🏠 Techo',
                description: 'Protege a los aficionados del clima',
                levels: [
                    { cost: 15, capacity: 0, income: 10000, description: 'Techo parcial' },
                    { cost: 25, capacity: 0, income: 20000, description: 'Techo completo' },
                    { cost: 40, capacity: 0, income: 35000, description: 'Techo retráctil' }
                ]
            },
            'floodlights': {
                name: '💡 Iluminación',
                description: 'Mejora la iluminación del estadio',
                levels: [
                    { cost: 3, capacity: 0, income: 5000, description: 'Luces básicas' },
                    { cost: 8, capacity: 0, income: 12000, description: 'Luces LED' },
                    { cost: 15, capacity: 0, income: 25000, description: 'Sistema de iluminación profesional' }
                ]
            },
            'scoreboard': {
                name: '📺 Marcador',
                description: 'Pantallas para mostrar información del partido',
                levels: [
                    { cost: 5, capacity: 0, income: 8000, description: 'Marcador digital básico' },
                    { cost: 12, capacity: 0, income: 18000, description: 'Pantalla gigante' },
                    { cost: 25, capacity: 0, income: 35000, description: 'Sistema de pantallas 360°' }
                ]
            }
        };

        // Initialize Game
        function initGame() {
            renderPlayers();
            renderLeagueTable();
            renderFixtures();
            renderStadiumUpgrades();
            updateBudgetDisplay();
            updateTeamStats();
            updateStadiumStats();
            renderFormation();
        }

        // Render Formation
        function renderFormation() {
            const formationField = document.getElementById('formation-field');
            const formation = formations[gameState.currentFormation];
            const positions = generateFormationPositions(formation);
            
            // Clear existing player positions
            const existingPlayers = formationField.querySelectorAll('.absolute:not(.grass-pattern):not(.field-lines)');
            existingPlayers.forEach(player => player.remove());
            
            positions.forEach((pos, index) => {
                const playerDiv = document.createElement('div');
                playerDiv.className = 'absolute';
                playerDiv.style.left = pos.left + 'px';
                playerDiv.style.top = pos.top + 'px';
                
                // Determine position type
                let positionType, positionLabel;
                if (index === 0) {
                    positionType = 'GK';
                    positionLabel = 'POR';
                } else if (index <= formation.defenders) {
                    positionType = 'DEF';
                    positionLabel = 'DEF';
                } else if (index <= formation.defenders + formation.midfielders) {
                    positionType = 'MID';
                    positionLabel = 'MED';
                } else {
                    positionType = 'FWD';
                    positionLabel = 'DEL';
                }
                
                const player = gameState.selectedPlayers[index];
                const playerPosition = document.createElement('div');
                playerPosition.className = `player-position ${player ? 'occupied' : ''}`;
                playerPosition.dataset.position = positionType;
                playerPosition.dataset.index = index;
                
                if (player) {
                    const firstName = player.name.split(' ')[0];
                    const displayName = firstName.length > 8 ? firstName.substring(0, 6) + '.' : firstName;
                    playerPosition.innerHTML = `
                        <div class="player-avatar">${getInitials(player.name)}</div>
                        <div class="player-name">${displayName}</div>
                    `;
                } else {
                    playerPosition.innerHTML = `
                        <div class="player-avatar">${positionLabel}</div>
                        <div class="player-name">Vacante</div>
                    `;
                }
                
                playerPosition.onclick = () => openPlayerModal(positionType, index);
                playerDiv.appendChild(playerPosition);
                formationField.appendChild(playerDiv);
            });
        }

        // Helper function to get initials
        function getInitials(name) {
            return name.split(' ').map(n => n[0]).join('').substring(0, 2);
        }

        // Tab Navigation
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                
                // Update active tab button
                document.querySelectorAll('.tab-btn').forEach(b => {
                    b.classList.remove('text-blue-600', 'border-b-2', 'border-blue-600');
                    b.classList.add('text-gray-600');
                });
                e.target.classList.add('text-blue-600', 'border-b-2', 'border-blue-600');
                e.target.classList.remove('text-gray-600');
                
                // Show/hide tab content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.add('hidden');
                });
                document.getElementById(`${tabName}-tab`).classList.remove('hidden');
            });
        });

        // Render Players in Market
        function renderPlayers() {
            const grid = document.getElementById('players-grid');
            const positionFilter = document.getElementById('position-filter').value;
            const teamFilter = document.getElementById('team-filter').value;
            
            let filteredPlayers = players.filter(player => {
                return (!positionFilter || player.position === positionFilter) &&
                       (!teamFilter || player.team === teamFilter) &&
                       !gameState.benchPlayers.find(p => p.id === player.id);
            });
            
            grid.innerHTML = filteredPlayers.map(player => `
                <div class="player-card bg-white border rounded-lg p-4 hover:shadow-lg">
                    <div class="flex flex-col items-center mb-3">
                        <div class="w-16 h-16 mb-2 rounded-full overflow-hidden border-2 border-gray-300 bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center text-white font-bold text-lg">
                            ${getInitials(player.name)}
                        </div>
                        <h3 class="font-bold text-sm text-center">${player.name}</h3>
                        <p class="text-xs text-gray-600">${player.team}</p>
                    </div>
                    
                    <div class="flex justify-between items-center mb-2">
                        <span class="inline-block px-2 py-1 text-xs rounded ${getPositionColor(player.position)}">
                            ${getPositionName(player.position)}
                        </span>
                        <span class="text-lg">${player.form}</span>
                    </div>
                    
                    <div class="flex justify-between items-center mb-3">
                        <span class="text-lg font-bold text-green-600">€${player.price}M</span>
                        <span class="text-sm font-semibold">${player.points} pts</span>
                    </div>
                    
                    <button onclick="selectPlayerFromMarket(${player.id})" 
                            class="w-full py-2 px-3 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm font-semibold">
                        Fichar
                    </button>
                </div>
            `).join('');
        }

        // Select Player from Market
        function selectPlayerFromMarket(playerId) {
            const player = players.find(p => p.id === playerId);
            
            if (gameState.budget < player.price) {
                alert('No tienes suficiente presupuesto para fichar a este jugador');
                return;
            }
            
            // Add player to bench
            gameState.benchPlayers.push(player);
            gameState.budget -= player.price;
            gameState.teamValue += player.price;
            
            // Try to assign to starting XI if position is available
            const positionIndices = getPositionIndices(player.position);
            const availableIndex = positionIndices.find(index => !gameState.selectedPlayers[index]);
            
            if (availableIndex !== undefined) {
                gameState.selectedPlayers[availableIndex] = player;
                gameState.totalPoints += player.points;
                alert(`¡${player.name} fichado y añadido al equipo titular!`);
            } else {
                alert(`¡${player.name} fichado y añadido al banquillo! Puedes cambiarlo por un titular cuando quieras.`);
            }
            
            updateBudgetDisplay();
            updateTeamStats();
            renderFormation();
            renderPlayers();
        }

        // Open Player Selection Modal
        function openPlayerModal(position, index) {
            gameState.currentModalPosition = position;
            gameState.currentModalIndex = index;
            
            const modal = document.getElementById('player-selection-modal');
            const title = document.getElementById('modal-title');
            const subtitle = document.getElementById('modal-subtitle');
            
            title.textContent = `Seleccionar ${getPositionName(position)}`;
            subtitle.textContent = `Elige un jugador para esta posición`;
            
            renderModalPlayers(position);
            modal.classList.remove('hidden');
        }

        // Close Player Selection Modal
        function closePlayerModal() {
            const modal = document.getElementById('player-selection-modal');
            modal.classList.add('hidden');
            gameState.currentModalPosition = null;
            gameState.currentModalIndex = null;
        }

        // Render Players in Modal
        function renderModalPlayers(position) {
            const grid = document.getElementById('modal-players-grid');
            
            const currentPlayer = gameState.selectedPlayers[gameState.currentModalIndex];
            let availablePlayersForPosition = gameState.benchPlayers.filter(player => 
                player.position === position && 
                !gameState.selectedPlayers.includes(player) &&
                player.id !== (currentPlayer ? currentPlayer.id : null)
            );
            
            if (availablePlayersForPosition.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <div class="text-6xl mb-4">😔</div>
                        <h3 class="text-lg font-bold text-gray-700 mb-2">No tienes jugadores disponibles</h3>
                        <p class="text-gray-500 mb-4">No hay ${getPositionName(position).toLowerCase()}s en tu banquillo</p>
                        <button onclick="closePlayerModal()" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                            Cerrar
                        </button>
                    </div>
                `;
                return;
            }
            
            grid.innerHTML = availablePlayersForPosition.map(player => `
                <div onclick="selectPlayerFromModal(${player.id}, true)" class="player-card bg-gradient-to-br from-blue-50 to-blue-100 border-2 border-blue-300 rounded-xl p-6 hover:shadow-xl cursor-pointer transform hover:scale-105 transition-all duration-200">
                    <div class="flex flex-col items-center">
                        <div class="w-24 h-24 mb-4 rounded-full overflow-hidden border-4 border-blue-500 shadow-lg bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center text-white font-bold text-xl">
                            ${getInitials(player.name)}
                        </div>
                        <h3 class="font-bold text-lg text-center text-gray-800 mb-1">${player.name}</h3>
                        <p class="text-sm text-gray-600 mb-3">${player.team}</p>
                        
                        <div class="flex items-center space-x-3 mb-3">
                            <span class="inline-block px-3 py-1 text-sm rounded-full font-semibold ${getPositionColor(player.position)}">
                                ${getPositionName(player.position)}
                            </span>
                            <span class="text-2xl">${player.form}</span>
                        </div>
                        
                        <div class="flex items-center space-x-4 text-center">
                            <div>
                                <div class="text-xl font-bold text-green-600">€${player.price}M</div>
                                <div class="text-xs text-gray-500">Valor</div>
                            </div>
                            <div>
                                <div class="text-xl font-bold text-blue-600">${player.points}</div>
                                <div class="text-xs text-gray-500">Puntos</div>
                            </div>
                        </div>
                        
                        <div class="mt-4 w-full">
                            <div class="bg-blue-600 text-white text-center py-2 px-4 rounded-lg font-semibold">
                                👆 Hacer clic para cambiar
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Select Player from Modal
        function selectPlayerFromModal(playerId, isFromBench) {
            const player = gameState.benchPlayers.find(p => p.id === playerId);
            const index = gameState.currentModalIndex;
            const currentPlayer = gameState.selectedPlayers[index];
            
            // If there's already a player in this position, move them to bench
            if (currentPlayer) {
                gameState.totalPoints -= currentPlayer.points;
            }
            
            // Add new player to starting XI
            gameState.selectedPlayers[index] = player;
            gameState.totalPoints += player.points;
            
            updateBudgetDisplay();
            updateTeamStats();
            renderFormation();
            renderPlayers();
            closePlayerModal();
            
            alert(`¡${player.name} puesto de titular!`);
        }

        // Get position indices for formation
        function getPositionIndices(position) {
            const formation = formations[gameState.currentFormation];
            const indices = [];
            
            if (position === 'GK') {
                return [0];
            }
            
            let currentIndex = 1;
            
            if (position === 'DEF') {
                for (let i = 0; i < formation.defenders; i++) {
                    indices.push(currentIndex + i);
                }
                return indices;
            }
            
            currentIndex += formation.defenders;
            
            if (position === 'MID') {
                for (let i = 0; i < formation.midfielders; i++) {
                    indices.push(currentIndex + i);
                }
                return indices;
            }
            
            currentIndex += formation.midfielders;
            
            if (position === 'FWD') {
                for (let i = 0; i < formation.forwards; i++) {
                    indices.push(currentIndex + i);
                }
                return indices;
            }
            
            return [];
        }

        // Update Budget Display
        function updateBudgetDisplay() {
            document.getElementById('budget').textContent = `€${gameState.budget.toFixed(1)}M`;
        }

        // Update Team Stats
        function updateTeamStats() {
            const selectedCount = gameState.selectedPlayers.filter(p => p !== null).length;
            document.getElementById('selected-count').textContent = `${selectedCount}/11`;
            document.getElementById('total-points').textContent = gameState.totalPoints;
            document.getElementById('team-value').textContent = `€${gameState.teamValue.toFixed(1)}M`;
            
            // Update selected players list
            const selectedPlayersDiv = document.getElementById('selected-players');
            const selectedPlayers = gameState.selectedPlayers.filter(p => p !== null);
            
            if (selectedPlayers.length === 0) {
                selectedPlayersDiv.innerHTML = '<p class="text-gray-500 text-center py-4">No hay jugadores seleccionados</p>';
            } else {
                selectedPlayersDiv.innerHTML = selectedPlayers.map(player => `
                    <div class="flex justify-between items-center p-2 bg-gray-50 rounded">
                        <div>
                            <span class="font-semibold text-sm">${player.name}</span>
                            <span class="text-xs text-gray-600 ml-2">${getPositionName(player.position)}</span>
                        </div>
                        <div class="text-right">
                            <div class="text-sm font-semibold text-green-600">€${player.price}M</div>
                            <div class="text-xs text-gray-600">${player.points} pts</div>
                        </div>
                    </div>
                `).join('');
            }

            // Update bench players list
            const benchPlayersDiv = document.getElementById('bench-players');
            const benchPlayers = gameState.benchPlayers.filter(p => !gameState.selectedPlayers.includes(p));
            
            if (benchPlayers.length === 0) {
                benchPlayersDiv.innerHTML = '<p class="text-gray-500 text-center py-4">No hay jugadores en el banquillo</p>';
            } else {
                benchPlayersDiv.innerHTML = benchPlayers.map(player => `
                    <div class="flex justify-between items-center p-2 bg-blue-50 rounded border border-blue-200">
                        <div>
                            <span class="font-semibold text-sm">${player.name}</span>
                            <span class="text-xs text-gray-600 ml-2">${getPositionName(player.position)}</span>
                        </div>
                        <div class="text-right">
                            <div class="text-sm font-semibold text-green-600">€${player.price}M</div>
                            <div class="text-xs text-gray-600">${player.points} pts</div>
                            <button onclick="sellPlayer(${player.id})" class="text-xs text-red-600 hover:text-red-800 mt-1">Vender</button>
                        </div>
                    </div>
                `).join('');
            }
        }

        // Render League Table
        function renderLeagueTable() {
            const tbody = document.getElementById('league-table');
            tbody.innerHTML = leagueTable.map((team, index) => `
                <tr class="${index === 0 ? 'bg-blue-50 font-semibold' : ''}">
                    <td class="py-2">${index + 1}</td>
                    <td class="py-2">${team.manager}</td>
                    <td class="py-2 text-right">${team.points}</td>
                </tr>
            `).join('');
        }

        // Render Fixtures
        function renderFixtures() {
            const fixturesDiv = document.getElementById('fixtures');
            fixturesDiv.innerHTML = fixtures.map(fixture => `
                <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
                    <div class="font-semibold">${fixture.home} vs ${fixture.away}</div>
                    <div class="text-sm text-gray-600">${fixture.date}</div>
                </div>
            `).join('');
        }

        // Sell Player Function
        function sellPlayer(playerId) {
            const player = gameState.benchPlayers.find(p => p.id === playerId);
            
            if (!player) return;
            
            if (confirm(`¿Estás seguro de que quieres vender a ${player.name}? Recibirás €${(player.price * 0.8).toFixed(1)}M`)) {
                // Remove from bench
                gameState.benchPlayers = gameState.benchPlayers.filter(p => p.id !== playerId);
                
                // Remove from starting XI if present
                const startingIndex = gameState.selectedPlayers.findIndex(p => p && p.id === playerId);
                if (startingIndex !== -1) {
                    gameState.selectedPlayers[startingIndex] = null;
                    gameState.totalPoints -= player.points;
                }
                
                // Add money back
                gameState.budget += player.price * 0.8;
                gameState.teamValue -= player.price;
                
                updateBudgetDisplay();
                updateTeamStats();
                renderFormation();
                renderPlayers();
                
                alert(`${player.name} vendido por €${(player.price * 0.8).toFixed(1)}M`);
            }
        }

        // Stadium Functions
        function renderStadiumUpgrades() {
            const upgradesDiv = document.getElementById('stadium-upgrades');
            upgradesDiv.innerHTML = Object.keys(stadiumUpgrades).map(upgradeKey => {
                const upgrade = stadiumUpgrades[upgradeKey];
                const currentLevel = gameState.stadium.upgrades[upgradeKey];
                const nextLevel = upgrade.levels[currentLevel];
                const isMaxLevel = currentLevel >= upgrade.levels.length;
                
                return `
                    <div class="upgrade-card border rounded-lg p-4 ${isMaxLevel ? 'bg-green-50 border-green-200' : 'bg-white border-gray-200'}">
                        <div class="flex justify-between items-start mb-2">
                            <div class="flex-1">
                                <h3 class="font-bold text-sm">${upgrade.name}</h3>
                                <p class="text-xs text-gray-600 mb-2">${upgrade.description}</p>
                                <div class="flex items-center space-x-2">
                                    <span class="text-xs px-2 py-1 rounded ${getLevelColor(currentLevel)}">
                                        Nivel ${currentLevel}/${upgrade.levels.length}
                                    </span>
                                    ${currentLevel > 0 ? `<span class="text-xs text-gray-500">${upgrade.levels[currentLevel - 1].description}</span>` : '<span class="text-xs text-gray-500">Sin mejorar</span>'}
                                </div>
                            </div>
                        </div>
                        
                        ${!isMaxLevel ? `
                            <div class="mt-3 p-3 bg-gray-50 rounded">
                                <div class="text-xs text-gray-600 mb-2">Próxima mejora:</div>
                                <div class="flex justify-between items-center mb-2">
                                    <span class="text-xs font-semibold">${nextLevel.description}</span>
                                </div>
                                <div class="grid grid-cols-3 gap-2 text-xs mb-3">
                                    <div>
                                        <span class="text-gray-500">Costo:</span>
                                        <div class="font-bold text-red-600">€${nextLevel.cost}M</div>
                                    </div>
                                    ${nextLevel.capacity > 0 ? `
                                        <div>
                                            <span class="text-gray-500">+Capacidad:</span>
                                            <div class="font-bold text-blue-600">+${nextLevel.capacity.toLocaleString()}</div>
                                        </div>
                                    ` : '<div></div>'}
                                    <div>
                                        <span class="text-gray-500">+Ingresos:</span>
                                        <div class="font-bold text-green-600">+€${(nextLevel.income/1000).toFixed(0)}K</div>
                                    </div>
                                </div>
                                <button onclick="upgradeStadium('${upgradeKey}')" 
                                        class="w-full py-2 px-3 bg-blue-600 text-white rounded hover:bg-blue-700 text-xs font-semibold ${gameState.budget < nextLevel.cost ? 'opacity-50 cursor-not-allowed' : ''}">
                                    ${gameState.budget >= nextLevel.cost ? 'Mejorar' : 'Sin presupuesto'}
                                </button>
                            </div>
                        ` : `
                            <div class="mt-3 p-3 bg-green-100 rounded text-center">
                                <span class="text-sm font-semibold text-green-800">✅ Nivel máximo alcanzado</span>
                            </div>
                        `}
                    </div>
                `;
            }).join('');
        }

        function upgradeStadium(upgradeKey) {
            const upgrade = stadiumUpgrades[upgradeKey];
            const currentLevel = gameState.stadium.upgrades[upgradeKey];
            const nextLevel = upgrade.levels[currentLevel];
            
            if (!nextLevel || gameState.budget < nextLevel.cost) {
                alert('No tienes suficiente presupuesto para esta mejora');
                return;
            }
            
            // Apply upgrade
            gameState.budget -= nextLevel.cost;
            gameState.stadium.upgrades[upgradeKey]++;
            gameState.stadium.totalInvestment += nextLevel.cost;
            gameState.stadium.capacity += nextLevel.capacity;
            gameState.stadium.matchIncome += nextLevel.income;
            
            // Update displays
            updateBudgetDisplay();
            updateStadiumStats();
            renderStadiumUpgrades();
            
            alert(`¡${upgrade.name} mejorado con éxito! Nivel ${gameState.stadium.upgrades[upgradeKey]}`);
        }

        function updateStadiumStats() {
            document.getElementById('stadium-capacity').textContent = gameState.stadium.capacity.toLocaleString();
            document.getElementById('stadium-income').textContent = `${(gameState.stadium.matchIncome/1000).toFixed(0)}K`;
            document.getElementById('total-investment').textContent = `€${gameState.stadium.totalInvestment.toFixed(1)}M`;
            document.getElementById('match-income').textContent = `€${(gameState.stadium.matchIncome/1000).toFixed(0)}K`;
        }

        function getLevelColor(level) {
            if (level === 0) return 'bg-gray-100 text-gray-600';
            if (level === 1) return 'bg-blue-100 text-blue-600';
            if (level === 2) return 'bg-purple-100 text-purple-600';
            return 'bg-yellow-100 text-yellow-600';
        }

        // Helper Functions
        function getPositionColor(position) {
            switch(position) {
                case 'GK': return 'bg-yellow-100 text-yellow-800';
                case 'DEF': return 'bg-blue-100 text-blue-800';
                case 'MID': return 'bg-green-100 text-green-800';
                case 'FWD': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function getPositionName(position) {
            switch(position) {
                case 'GK': return 'Portero';
                case 'DEF': return 'Defensa';
                case 'MID': return 'Centrocampista';
                case 'FWD': return 'Delantero';
                default: return position;
            }
        }

        // Event Listeners
        document.getElementById('position-filter').addEventListener('change', renderPlayers);
        document.getElementById('team-filter').addEventListener('change', renderPlayers);
        document.getElementById('formation-selector').addEventListener('change', (e) => {
            gameState.currentFormation = e.target.value;
            renderFormation();
        });

        // Initialize the game
        initGame();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9862d44581e49a49',t:'MTc1OTA1ODE5Mi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
